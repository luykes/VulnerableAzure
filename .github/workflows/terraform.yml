#Github Actions to trigger Terraform Cloud and provision using AZ
name: 'Deploy Action'

on:
  workflow_dispatch:
  push:
    branches:
    - master
    paths:
    - '_build_flag'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

    # On push to master, build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve

    #API Call to Terraform.io to get app-services name
    - name: Get App Variable Name
      env:
        TF_API_TOKEN: ${{ secrets.TERRAFORM }}
        TF_WORKSPACE_ID: ${{ secrets.TF_ENV }}
      run: |
           out=$(curl --silent --header "Authorization: Bearer ${TF_API_TOKEN}" --header "Content-Type: application/vnd.api+json" https://app.terraform.io/api/v2/workspaces/${TF_WORKSPACE_ID}/vars | jq -c --arg key "victim-company" '.data[].attributes | select (.key=="victim_company") | .value' | tr -d \")
           echo ::set-env name=APP_NAME::$(echo "${out}-app-service") >> $GITHUB_ENV
           echo ::set-env name=RG::$(echo "${out}-rg") >> $GITHUB_ENV
      
      #Use AZ to provision webapp   
      #test
    - name: Deploy app using AZ
      env:
        AZ_ID: ${{ secrets.AZ_ID }}
        AZ_SECRET: ${{ secrets.AZ_SECRET }}
        AZ_TENANT: ${{ secrets.AZ_TENANT }}
      run: |
           #Login to Azure
           az login  --service-principal -u ${AZ_ID} -p ${AZ_SECRET} -t ${AZ_TENANT}
           az webapp deployment source config --name -n ${APP_NAME} --resource-group ${RG} --repo-url https://github.com/luykes/VulnerableAzure.git --branch master --manual-integration                     
           az webapp config set -g ${RG} -n ${APP_NAME} --startup-file /home/site/wwwroot/VulnerableWebApp/startup.sh

           
         
           

    
   

         
           

    
   
